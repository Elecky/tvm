# data configs
dtype_w: int16
dtype_n: int8

multi_core: false
core_extent: 4

# scalar register file configs
register_file:
  size: 32  # number of architectural registers. DON'T MODIFY THIS, since LLVM NNPU backend defined register file size as 32.
  # read_port_num: 6  # number of future file read ports, can be no less than 6,
  #                   # since some insn has to read 6 reigsters.
  # read_port_group_size: 2  # the number of read port comsumed by a insn is K times of this value.

# predict a branch is taken or just fall through.
# if false, IF will continue fetching next insn, and wait for branch request.
# if true, IF will jump to target and continue fetching, so if branch is not taken,
# the issue queue will be cleared and fetch insn starts from next insn.
predictBranchTaken: true

issue_queue:
  size: 8  # number of issue queue slots
  issue_depth: 2  # how many insns can be fetched and issued on every cycle.

ReservationStations:  # the number of slot of each reservation station.
  ALU: 8
  load_store_unit: 4
  tensor_pipeline: 4

memory_queues: 
  vector_unit: 4
  matrix_unit: 4
  edram_dma_unit: 4
  buffer_copy_set_unit: 4

#-------- configs follows are related to storage structure. --------#
# dram configs
dram:
  nchannel: 2
  # width in bits of every channel, has to be the power of 2. NOT USED AT PRESENT.
  width_per_channel: 64
  # log size in byte of every channel
  # due to the limit of tvm, the size is represented by int.
  log_size_per_channel: 22
  # memory address map policy. NOT USED AT PRESENT
  map_policy: interleaved
  # timing related parameters
  speed: 32  # equivalent transfer rate, bytes per cycle.

# scratchpad design, choices are [unified, seperated]
scratchpad_design: unified

# unified scratchpad configs
scratchpad0:
  enable: true
  nchannel: 4
  # qeuivalent width in bits of every channel, has to be the power of 2
  width_per_channel: 128
  # log size in byte of every channel
  log_size_per_channel: 18
  # read and write delays in cycle
  r_delay: 2
  w_delay: 2
  # memory address map policy
  map_policy: interleaved

scratchpad1:
  enable: true
  nchannel: 4
  # qeuivalent width in bits of every channel, has to be the power of 2
  width_per_channel: 128
  # log size in byte of every channel
  log_size_per_channel: 18
  # read and write delays in cycle
  r_delay: 2
  w_delay: 2

scratchpad2:
  enable: false

scratchpad3:
  enable: false

# accumulation buffer in matrix unit.
acc_buffer:
  nchannel: 4
  # qeuivalent width in bits of every channel, has to be the power of 2
  width_per_channel: 128
  # log size in byte of every channel
  log_size_per_channel: 10
  # read and write delays in cycle
  r_delay: 1
  w_delay: 1
  # accumulation delay of dtype_n and dtype_w
  acc_dtype_n_delay: 1
  acc_dtype_w_delay: 1
  # memory address map policy
  map_policy: interleaved

sclr_buffer:
  r_delay: 1
  w_delay: 1
  log_size: 12  # 4KB scalar buffer.

#-------- configs follows are delays of execution units. --------#
ALU:
  alu_count: 1  # number of ALUs
  default_delay: 1
  delays: { MulU: 2, DivU: 4, ModU: 4, MulIU: 2, DivIU: 4, ModIU: 4 }

vector_unit:
  default_delay: 1
  delays: { VExp: 2, VLog: 2, VDivV: 3, IDivV: 3, VReduceSum: 2, VReduceMax: 2, VReduceMin: 2,
            VDivS: 3, SDivV: 3, VDotV: 2 }
  size: 16

matrix_unit:
  set_up_cycle: false  # need one cycle to calculate and set up read/write access.
                      # this simply adds one cycle on every instruction's read/write phase.
  multiplier_delay: 2  # 
  adder_tree_delay: 2
  adder_delay: 1
  opcodes_need_multiply: ['GEMM', 'MMulM', 'MMulI', 'MMulV', 'MRowDot']
  opcodes_nned_adder_tree: ['GEMM', 'MRowDot', 'MReduceSumRow']
  opcodes_need_adder: ['MAddM', 'MSubM', 'MAddI', 'ISubM', 'MMulI', 'MAddV', 'MSubV']

misc_delays:
  address_generation: 1  # number of cycles needed to calculate memory dependency, ie, the delay in AGU.

DMA:
  start_up_time: 1  # the time in cycles needed to start a DMA.
  speed: 8  # the qeuivalent transfer speed, bytes per cycle (of accelerator).

delay_modeling_switch:
  DMA: true
  scratchpad_ls: true